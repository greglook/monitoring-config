; Main entry point for Riemann rules. The code here is evaluated in
; the `riemann.config` namespace when it is loaded.

#_
(require
  '[gslook.riemann.common :refer [env]]
  :reload-all)


(def config-dir "{{ riemann_conf_dir }}/")


; Log output to a file.
(logging/init {:file "/var/log/riemann/riemann.log"})
(logging/set-level "riemann.transport.tcp" org.apache.log4j.Level/INFO)
(logging/set-level "riemann.transport.udp" org.apache.log4j.Level/INFO)


; Accept metrics via UDP.
(udp-server :host "{{ riemann_metrics_bind }}"
            :port {{ riemann_udp_port }}
            :max-size 65535)

; Accept metrics via TCP.
(tcp-server :host "{{ riemann_metrics_bind }}"
            :port {{ riemann_tcp_port }})

; Set up a TLS-protected port for secure metrics. The key can be generated with
; the following command:
;     openssl pkcs8 -topk8 -nocrypt -in $tls_key -out $pkcs8_key
(tcp-server :host "{{ riemann_metrics_bind }}"
            :port {{ riemann_tls_port }}
            :tls? true
            :key     (str config-dir "tls-key.pkcs8")
            :cert    (str config-dir "riemann.home.gslook.net.crt")
            :ca-cert (str config-dir "gslook-ca.crt"))

; Serve websockets locally so it can be proxied securely by Nginx.
(ws-server  :host "{{ riemann_ws_bind }}"
            :port {{ riemann_ws_port_internal }})


; Sweep the index for expired events every N seconds.
(periodically-expire 10)


(let [index (default {:ttl 300} (index)) ]
  (streams
    ; For now, just record things to the index.
    index))
